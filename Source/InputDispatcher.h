//-----------------------------------------------------------------------------
//	Originally written by Taron Millet, except where otherwise noted
//-----------------------------------------------------------------------------

#pragma once

/*
	Coordinates and dispatches input actions to be sent to the target game.
	Manages input queues, processes actions, and handles overlapping inputs
	generated by the InputTranslator module.
*/

#include "Common.h"

namespace InputDispatcher
{

// Load configuration settings from current profile
void loadProfile();

// Call once per frame to process the queue and dispatch input
void update();

// Clean up and prepares for app shutdown
void cleanup();

// Sends the input for a sequence of key taps (or a single tap).
// The first character is checked against ECommandChar to see if
// it is a string of Virtual-Key Codes (no command char set) or
// ASCII chars that should be "typed" into a text entry field.
void sendKeySequence(const std::string& theMacro);

// Requests given key (or mouse button) be held down until...
void setKeyHeld(u8 theVKey);
// Requests given key (or mouse button) being held down be released
void setKeyReleased(u8 theVKey);

// Shift mouse mouse position relative to current position
// Amount specified by dx/dy is in relation to mouse speed
// settings, and expected range of -255 to 255.
void moveMouse(int dx, int dy, bool digital);

// Adjusts speeds from moveMouse and, if true, causes
// right mouse button to be held down.
void setMouseLookMode(bool);
// Returns if currently in MouseLook mode
bool isInMouseLookMode();

// Send mouse wheel up/down motion. Expected range of -255 to 255.
// In cases where target app only responds to full "clicks" of the
// wheel at a time and not smaller movements, set 'stepped' = true,
// though it means the scroll motion will be much less smooth.
void scrollMouseWheel(int dy, bool digital, bool stepped = false);

} // InputDispatcher
