//-----------------------------------------------------------------------------
//	Originally written by Taron Millet, except where otherwise noted
//-----------------------------------------------------------------------------

#pragma once

/*
	Coordinates and dispatches input actions to be sent to the target game.
	Manages input queues, processes actions, and handles overlapping inputs
	generated by the InputTranslator module.
*/

#include "Common.h"

namespace InputDispatcher
{

// Load configuration settings from current profile
void loadProfile();

// Clean up and prepares for app shutdown
void cleanup();

// Use when switch to a dialog or minimize game app
void forceReleaseHeldKeys();

// Call once per frame to process the queue and dispatch input
void update();

// Sends the input for given command, for those that are valid
// as key inputs (see GlobalConstants.h)
void sendKeyCommand(const Command& theCommand);

// Sets mouse mode, which affects things like mouse movement
// speed in moveMouse (if allowed at all) and automatically
// holding down right mouse button to active MouseLook mode.
void setMouseMode(EMouseMode theMouseMode);

// Shift mouse mouse position relative to current position.
// Amount specified by dx/dy is in relation to mouse speed
// settings, and expected range of -255 to 255.
// lookX is is used as dx only when in standard mouselook mode
// and character movement is active via moveCharacter()
void moveMouse(int dx, int dy, int lookX, bool digital);

// Move mouse directly to specific location
void moveMouseTo(const Command& theCommand);

// Send mouse wheel up/down motion. Expected range of -255 to 255.
// In cases where target app only responds to full "clicks" of the
// wheel at a time and not smaller movements, set 'stepped' = true,
// though it means the scroll motion will be much less smooth.
void scrollMouseWheel(int dy, bool digital, bool stepped = false);

// Instantly moves mouse wheel up/down theCount number of "clicks"
void jumpMouseWheel(ECommandDir theDir, u8 theCount);

// Move character forward, back, left, right, and turning.
// Amount specified for each movement type is -255 to 255 range.
void moveCharacter(int move, int turn, int strafe, bool autoRun, bool lock);

} // InputDispatcher
